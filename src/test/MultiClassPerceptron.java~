package test;

public class MultiClassPerceptron {
    private final List<Perceptron> perceptrons;
    private final int numClasses;
    private final int dimension;

    public MultiClassPerceptron(int numClasses, int dimension, double alpha) {
        this.numClasses = numClasses;
        this.dimension = dimension;
        this.perceptrons = new ArrayList<>();

        // Create a perceptron for each language
        for (int i = 0; i < numClasses; i++) {
            perceptrons.add(new Perceptron(dimension, alpha));
        }
    }

    public int classify(double[] features) {
        double maxOutput = Double.NEGATIVE_INFINITY;
        int predictedClass = 0;

        // Find the perceptron with highest output
        for (int i = 0; i < numClasses; i++) {
            double output = perceptrons.get(i).computeNet(features);
            if (output > maxOutput) {
                maxOutput = output;
                predictedClass = i;
            }
        }

        return predictedClass;
    }

    public void train(List<DataPoint> trainingData, int epochs) {
        for (int i = 0; i < numClasses; i++) {
            final int currentClass = i;

            // Prepare data for one-vs-all classification
            List<DataPoint> binaryData = trainingData.stream()
                    .map(dp -> new DataPoint(
                            dp.getFeatures(),
                            dp.getLanguageIndex() == currentClass ? 1 : 0))
                    .collect(Collectors.toList());

            // Train the perceptron for this class
            perceptrons.get(i).learn(binaryData, epochs);
        }
    }
}